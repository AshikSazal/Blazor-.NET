@if(cities != null && cities.Count > 0)
{
    <div class="container-fluid text-center">
        <div class="row">
            @foreach (var city in cities)
            {
                <CityComponent city="@city" selectedCity="@selectedCity" SelectCityCallback="HandleCitySelection"></CityComponent>
            }
        </div>
    </div>
}

@code {
    // Child to parent connection CityListComponent to Servers
    [Parameter]
    public EventCallback<string> SelectCityCallback { get; set; }

    public void ClearSelction()
    {
        this.selectedCity = string.Empty;
    }

    private string selectedCity = "Toronto";
    private List<string> cities = CitiesRepository.GetCities();
    private void HandleCitySelection(string cityName)
    {
        selectedCity = cityName;
        SelectCityCallback.InvokeAsync(cityName);
    }

    // Component Life cycle
    protected override bool ShouldRender()
    {
        var guid = Guid.NewGuid();
        Console.WriteLine($"{this.GetType().Name}: {nameof(ShouldRender)} : {guid}");
        return base.ShouldRender();
    }
    public override Task SetParametersAsync(ParameterView parameters)
    {
        var guid = Guid.NewGuid();
        Console.WriteLine($"{this.GetType().Name}: {nameof(SetParametersAsync)} : {guid}");
        return base.SetParametersAsync(parameters);
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        var guid = Guid.NewGuid();
        Console.WriteLine($"{this.GetType().Name}: {nameof(OnInitialized)} : {guid}");
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        var guid = Guid.NewGuid();
        Console.WriteLine($"{this.GetType().Name}: {nameof(OnParametersSet)} : {guid}");
    }
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        var guid = Guid.NewGuid();
        Console.WriteLine($"{this.GetType().Name}: {nameof(OnAfterRender)} : {guid}");
    }
    public void Dispose()
    {
        var guid = Guid.NewGuid();
        Console.WriteLine($"{this.GetType().Name}: {nameof(Dispose)} : {guid}");
    }
}
